# -----------------------------------------------------------------------------------
# 다양한 함수의 형태 - (2) 반환값 없는 함수
# 함수 기능 : 2개의 정수를 덧셈 후 출력해주는 기능
# 함수 이름 : addTwo
# 매개 변수 : x, y
#  반 환 값 : 없음
# -----------------------------------------------------------------------------------

def addTwo(x=0, y=0):
    value= x + y
    print(f'{x}+{y}={value}')


# 함수 사용 즉 함수 호출 ===============================================================
addTwo(10, 3)           # 반환값 없음 (none)

# 함수 호출 시에 매개변수 갯수와 동일하게 데이터 전달해야 함!
# 안 맞으면 Error 발생
# addTwo(10)
# addTwo(10,10,10)
# -----------------------------------------------------------------------------------


# -----------------------------------------------------------------------------------
# 함수 기능 : 영어 단어를 입력 받아서 모두 대문자로 변환 해주는 기능
# 함수 이름 : convertCase
# 매개 변수 : word
#  반 환 값 : 없음  => 아무 일을 안 하게 됨 ==> return 하기
# -----------------------------------------------------------------------------------

def convertCase(word):
    return word.upper()


# -----------------------------------------------------------------------------------
# 함수 기능 : 시퀀스 객체의 모든 원소를 대문자로 변환 해주는 기능
# 함수 이름 : convertCase2
# 매개 변수 : str 타입의 원소로 구성된 list
#  반 환 값 : 없음
# -----------------------------------------------------------------------------------

def convertCase2(datalist):
    # for i in datalist:            # 원소를 읽기만 하는 in, 값 변환에는 사용하지 않는다.
    #     i = i.upper()           # 그 당시에만 바뀌고 실제로 저장되지는 않음, 원소 자체가 바뀌지는 않는다.
    # for idx in range(len(datalist)):     # index 를 알면 바꿀수 있다.
    #     datalist[idx] = datalist[idx].upper()
    for idx, data in enumerate(datalist):       # 또는 enumerate 를 써서도 가능하다.
        datalist[idx] = datalist[idx].upper()

# 함수 사용 즉, 함수 호출 --------------------------------------------------------------
datas = ['Apple','Banan','Mango']
print(f'[Bf] {datas}')
convertCase2(datas)
print(f'[Bf] {datas}')


